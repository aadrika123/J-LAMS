//!-----------------------------------------------------------------//
// !Author: Jaideep
// !status: Open

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum AssetType {
  LAND
  BUILDING
  STATUTES_HERITAGE
  PUBLIC_LIGHTING
  LAKE_POND
  PLANT_MACHINERY
}

enum OwnershipType {
  LEASEHOLD
  FREEHOLD
}

enum RoadType {
  EARTHEN
  TAR
  CONCRETE
}

enum ModeOfAcquisition {
  ACQUIRED
  DONATION
  PURCHASE
  OTHERS
}



model assets_list {
  id                          Int       @id @default(autoincrement())
  assets_id                   String    @unique
  asset_type                  AssetType // Enum for LAND, BUILDING, etc.
  khata_no                    String?
  plot_no                     String?
  ward_no                     String?
  building_name               String?
  address                     String?
  ulb_id                      Int?
  depreciation_method         String?
  appreciation_method         String?
  location                    String?
  blue_print                  String?
  ownership_doc               String?
  type_of_land                String?
  area                        String?
  order_no                    String?   @unique
  order_date                  String?
  acquired_from               String?
  mode_of_acquisition         ModeOfAcquisition?
  role                        String?

  // Additions from new common asset model
  head                        String?
  cost_of_acquisition         Float?
  accumulated_depreciation    Float?
  addition_during_year        Float?
  depreciation_for_year       Float?
  wdv_start                   Float?
  wdv_end                     Float?
  ownership_type              OwnershipType?
  survey_no                   String?
  date_of_acquisition         String?
  improvement_done            Boolean?
  improvement_date            String?
  improvement_cost            Float?
  total_cost                  Float?
  current_usage               String?
  title_document_ref          String?
  current_market_value        Float?
  remarks                     String?
  contractor_name             String?
  road_name                   String?
  road_type                   RoadType?
  number_of_lamp_posts        Int?
  description                 String?
  make                        String?
  financial_year              String?

  parent_land_id              Int? // For hierarchical assets when assets like buildings which are part of a existing land.
  parent_land                 assets_list? @relation("LandParent", fields: [parent_land_id], references: [id])
  buildings_on_land           assets_list[] @relation("LandParent")

  // Status
  status                      Int?      @default(0)
  is_restructured             Boolean   @default(false)
  is_drafted                  Boolean   @default(false)

  // Relations
  asset_list_change_logs      assets_list_change_log[]
  asset_field_officer_req     asset_fieldOfficer_req?
  floor_data                  floorData[]

  created_at                  DateTime  @default(now()) @map("created_at")
  updated_at                  DateTime  @updatedAt     @map("updated_at")
}


model floorData {
  id           Int         @id @default(autoincrement())
  floor        String?
  plotCount    Int?
  type         String?
  assetsList   assets_list @relation(fields: [assetsListId], references: [id], onDelete: Cascade)
  assetsListId Int 

  details details[]

  created_at DateTime @default(now()) @map("created_at")
  updated_at DateTime @updatedAt @map("updated_at")
}

model details {
  id            Int       @id @default(autoincrement())
  index         Int?
  type          String?
  length        String?
  breadth       String?
  height        String?
  property_no   String?
  owner_name    String?
  type_of_plot  String?
  floorData     floorData @relation(fields: [floorDataId], references: [id], onDelete: Cascade)
  floorDataId   Int

  created_at DateTime @default(now()) @map("created_at")
  updated_at DateTime @updatedAt @map("updated_at")
}

model assets_list_change_log {
  id Int @id @default(autoincrement())

  type_of_assets          String?
  asset_sub_category_name String?
  assets_category_type    String?
  khata_no                String?
  plot_no                 String?
  ward_no                 String?
  address                 String?
  depreciation_method     String?
  apreciation_method      String?
  blue_print              String?
  ownership_doc           String?
  type_of_land            String?
  area                    String?
  order_no                String?
  order_date              String?
  acquisition             String?
  from_whom_acquired      String?
  mode_of_acquisition     String?
  role                    String?

  status Int? @default(0) // 0: pending, 1: approved, -1: rejected

  asset   assets_list @relation(fields: [assetId], references: [id], onDelete: Cascade)
  assetId Int 

  created_at DateTime @default(now()) @map("created_at")
  updated_at DateTime @updatedAt @map("updated_at")
}

model asset_checker_req {
  id Int @id @default(autoincrement())

  fieldOfficer    asset_fieldOfficer_req @relation(fields: [assetId], references: [assetId], onDelete: Cascade)
  assetId         Int                     @unique
  checker_remarks String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model asset_fieldOfficer_req {
  id Int @id @default(autoincrement())

  long        String?
  lat         String?
  remarks     String?
  image_one   String?
  image_two   String?
  image_three String?
  image_four  String?
  image_five  String?

  asset   assets_list @relation(fields: [assetId], references: [id], onDelete: Cascade)
  assetId Int          @unique

  asset_checker_req asset_checker_req[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}




model market {
  id           Int      @id @default(autoincrement())
  circle_id    Int
  market_name  String
  is_active    Boolean
  created_at   DateTime
  updated_at   DateTime
  shop_counter Int
  toll_counter Int
  ulb_id       Int
}

model location {
  id           Int      @id @default(autoincrement())
  location     String?   
  ulb_id       Int
  building_name String? // Added building_name field
  address      String?  // Added address field
  is_active    Boolean?
  created_at   DateTime @db.Timestamp
  updated_at   DateTime @db.Timestamp
}

model notifications {
  id           Int   @id @default(autoincrement())
  asset_id     String   // Foreign key to the assets_list table
  message      String
  created_at   DateTime @default(now())
  status       Int
  role         String?  // Role (e.g., Municipal, Field Officer)
}

